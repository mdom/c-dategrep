#!/bin/sh

PATH=.:$PATH

plan=0
rc_plan=0

ok(){
	printf "ok $plan${name+ $name}\n";
}

not_ok(){
	printf "not ok $plan${name+ $name}\n"
}

skip(){
	skip=$1
}

todo(){
	todo=$1
}

depends_on(){
	if ! command -v "$1" >/dev/null 2>&1;then
		skip_all "$1 not installed."
	fi
}

skip_all(){
	clean_up
	printf "1..0 # SKIP${1+ $1}\n"
	exit 0
}

check_expections(){
	if [ "$plan" != 0 ];then
		test_output stderr_plan stderr &&
		test_output stdout_plan stdout &&
		[ ${rc-0} -eq $rc_plan ] &&
		ok ||
		not_ok
	fi
}

name(){
	name=$1
}

test_output(){
	if cmp -s "$1" "$2";then
		return 0
	else
		diff -u "$1" "$2" | diag
		return 1
	fi
}

done_testing(){
	printf "1..$plan\n"
	exit 0
}

maybe_touch(){
	for i in "$@";do
		[ -e "$i" ] || touch "$i"
	done
}

tap(){
	maybe_touch stdout_plan stderr_plan
	plan=$(( plan + 1 ))
	if [ -n "$skip" ];then
		printf "ok $plan # SKIP $skip\n"
		skip=""
	elif [ -n "$todo" ];then
		printf "not ok $plan # TODO $todo\n"
		todo=""
	else
		if [ -e stdin ];then
			"$@" < stdin > stdout 2> stderr
		else	
			"$@" > stdout 2> stderr
		fi
		rc=$?
		check_expections
	fi
	clean_up
}

diag(){
	if [ -n "$1" ];then
		printf "# $1\n"
	else
		sed 's/^/# /'
	fi
}

bail_out(){
	printf "Bail out!${1+ $1}\n"
	exit 0
}

stdout_is(){ cat > stdout_plan; }
stderr_is(){ cat > stderr_plan; }
stdin(){ cat > stdin; }

rc_is() { rc_plan=$1; }

clean_up(){
	rm -f stdout stderr stdin stdout_plan stderr_plan;
	rc_plan=0
}

if [ -e "$1" ];then
	. "$1"
	## this code should not be reached
	if [ $plan -gt 0 ];then
		printf "# Tests were run but done_testing() was not seen.\n" >&2
		exit 1
	fi
fi

exit 0

